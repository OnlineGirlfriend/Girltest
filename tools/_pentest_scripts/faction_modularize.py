import os
import re
import glob

# A list of: (source_faction_name, [source_file_globs], target_faction_name, target_file_path)
FACTION_FILE_PAIRS = [
    (
        "solgov",
        [
            "code/modules/clothing/factions/solgov*.dm",
            # "code/modules/clothing/helmets/solgov_*.dm",
            # Placeholder for any additional solgov files
        ],
        "dream",
        "modular_pentest/modules/faction_dream/code/modules/clothing/factions/_solgov_to_dream.dm"
    ),
    (
        "clip",
        ["code/modules/clothing/factions/clip*.dm"],
        "terragov",
        "modular_pentest/modules/faction_terragov/code/modules/clothing/factions/_clip_to_terragov.dm"
    ),
]

# Regex to match any /obj path (can customize to restrict by depth)
TYPE_DEF_REGEX = re.compile(r'^(/obj[^\s{]+)')

def parse_types_from_files(file_patterns):
    found = set()
    for pattern in file_patterns:
        for filepath in glob.glob(pattern):
            if not os.path.isfile(filepath):
                continue
            with open(filepath, encoding="utf-8") as f:
                for line in f:
                    line = line.strip()
                    match = TYPE_DEF_REGEX.match(line)
                    if match:
                        found.add(match.group(1))
    return found

def check_faction_duplicates(source_name, source_patterns, target_name, target_file):
    source_types = parse_types_from_files(source_patterns)

    if not os.path.exists(target_file):
        print(f"‚ùó Missing target file for {target_name}: {target_file}")
        return False

    with open(target_file, encoding="utf-8") as f:
        target_code = f.read()

    missing = []
    for type_path in source_types:
        if type_path not in target_code:
            missing.append(type_path)

    if missing:
        print(f"\n‚ùå Missing 1:1 duplicates for {source_name} items in {target_name} file:")
        for missing_type in missing:
            print(f" - {missing_type}")
        return False

    print(f"‚úÖ {source_name} ‚Üí {target_name} one-to-one duplication check passed.")
    return True

def main():
    success = True
    for source_name, source_files, target_name, target_file in FACTION_FILE_PAIRS:
        print(f"\nüîç Checking 1:1 path duplication: {source_name} ‚Üí {target_name}")
        if not check_faction_duplicates(source_name, source_files, target_name, target_file):
            success = False
    if not success:
        exit(1)

if __name__ == "__main__":
    main()
