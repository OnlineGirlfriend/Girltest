import os
import re
import glob

# Each mapping: (source_faction_name, [list_of_source_files], target_faction_name, target_file)
FACTION_FILE_PAIRS = [
    (
        "solgov",
        [
            "code/modules/clothing/factions/solgov*.dm"  # support globs
            # "code/modules/clothing/helmets/solgov_*.dm",
        ],
        "dream",
        "modular_pentest/modules/faction_dream/code/modules/clothing/factions/dream.dm"
    ),
    (
        "clip",
        ["code/modules/clothing/factions/clip.dm"],
        "terragov",
        "modular_pentest/modules/faction_terragov/code/modules/clothing/factions/terragov.dm"
    ),
]

TYPE_DEF_REGEX = re.compile(r'^(/obj[^\s{]+)')

def parse_types_from_files(file_patterns):
    all_types = []
    for pattern in file_patterns:
        for filepath in glob.glob(pattern):
            if not os.path.isfile(filepath):
                continue
            with open(filepath, encoding="utf-8") as f:
                for line in f:
                    line = line.strip()
                    match = TYPE_DEF_REGEX.match(line)
                    if match:
                        all_types.append(match.group(1))
    return all_types

def check_faction_file_pair(source_name, source_file_patterns, target_name, target_path):
    source_types = parse_types_from_files(source_file_patterns)

    if not os.path.exists(target_path):
        print(f"‚ö†Ô∏è  Warning: Missing target file for {target_name}: {target_path}")
        return False

    with open(target_path, encoding="utf-8") as f:
        target_code = f.read()

    missing = []
    for src in source_types:
        expected_target = src.replace(f"/{source_name}/", f"/{target_name}/")
        if expected_target not in target_code:
            missing.append((src, expected_target))

    if missing:
        print(f"\n‚ùå Missing {target_name} equivalents for {source_name} items:")
        for s, t in missing:
            print(f" - {s} ‚ûú (missing) {t}")
        return False

    print(f"‚úÖ {source_name} ‚Üí {target_name} check passed.")
    return True

def main():
    success = True
    for source_name, source_files, target_name, target_file in FACTION_FILE_PAIRS:
        print(f"\nüîç Checking for unique varients of: {source_name} ‚Üí {target_name}...")
        if not check_faction_file_pair(source_name, source_files, target_name, target_file):
            success = False
    if not success:
        exit(1)

if __name__ == "__main__":
    main()
