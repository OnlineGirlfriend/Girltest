/*
		SYNDICATE MODULES
*/

/obj/item/robot_module/syndicate
	name = "Syndicate Assault"
	basic_modules = list(
		/obj/item/assembly/flash/cyborg,
		/obj/item/melee/energy/sword/cyborg,
		/obj/item/gun/energy/printer,
		/obj/item/gun/ballistic/revolver/grenadelauncher/cyborg,
		/obj/item/card/emag/borg,
		/obj/item/crowbar/cyborg,
		/obj/item/extinguisher/mini,
		)

	cyborg_base_icon = "synd_sec"
	moduleselect_icon = "malf"
	can_be_pushed = FALSE
	hat_offset = 3

/obj/item/robot_module/syndicate/rebuild_modules()
	..()
	var/mob/living/silicon/robot/Syndi = loc
	Syndi.faction  -= "silicon" //ai turrets

/obj/item/robot_module/syndicate/remove_module(obj/item/I, delete_after)
	..()
	var/mob/living/silicon/robot/Syndi = loc
	Syndi.faction += "silicon" //ai is your bff now!

/obj/item/robot_module/syndieproto
	name = "Brigador-type Prototype Commando"
	basic_modules = list(
		/obj/item/card/emag/borg,
		/obj/item/pickaxe/drill/jackhammer/brigador,
		/obj/item/weldingtool/largetank/cyborg,
		/obj/item/borg/sight/thermal,
		/obj/item/gun/energy/printer/commando,
		/obj/item/assembly/flash/cyborg,
		/obj/item/crowbar/cyborg,
		/obj/item/reagent_containers/borghypo/syndicate,
		/obj/item/healthanalyzer,
		/obj/item/gps/cyborg,
		/obj/item/extinguisher/mini,
		)

	cyborg_base_icon = "protosynd"
	moduleselect_icon = "malf"
	can_be_pushed = FALSE
	hat_offset = 3

/obj/item/robot_module/syndieproto/rebuild_modules()
	..()
	var/mob/living/silicon/robot/Syndi = loc
	Syndi.faction  -= "silicon" //ai turrets

/obj/item/robot_module/syndieproto/remove_module(obj/item/I, delete_after)
	..()
	var/mob/living/silicon/robot/Syndi = loc
	Syndi.faction += "silicon" //ai is your bff now!

/obj/item/robot_module/syndicate_medical
	name = "Syndicate Medical"
	basic_modules = list(
		/obj/item/assembly/flash/cyborg,
		/obj/item/crowbar/cyborg,
		/obj/item/healthanalyzer,
		/obj/item/reagent_containers/borghypo/syndicate,
		/obj/item/borg/apparatus/beaker,
		/obj/item/reagent_containers/dropper,
		/obj/item/reagent_containers/syringe,
		/obj/item/borg/cyborg_omnitool/medical,
		/obj/item/borg/cyborg_omnitool/medical,
		/obj/item/melee/energy/sword/cyborg/saw,
		/obj/item/extinguisher/mini,
		/obj/item/roller/robo,
		/obj/item/stack/medical/gauze/cyborg,
		/obj/item/organ_storage,
		/obj/item/shockpaddles/syndicate/cyborg,
		/obj/item/gun/medbeam,
		)

	cyborg_base_icon = "synd_medical"
	moduleselect_icon = "malf"
	can_be_pushed = FALSE
	hat_offset = 3

/obj/item/robot_module/syndicate_medical/be_transformed_to(obj/item/robot_module/old_module)
	var/mob/living/silicon/robot/R = loc
	var/static/list/synd_med_icons
	if(!synd_med_icons)
		synd_med_icons = list(
		"Syndicate Model M" = image(icon = 'icons/mob/robots.dmi', icon_state = "synd_medical"),
		"Qualified Doctor BL" = image(icon = 'modular_pentest/modules/robots/icons/mob/syndicate_doctor_black.dmi', icon_state = "qualified_doctor"),
		"Qualified Doctor BR" = image(icon = 'modular_pentest/modules/robots/icons/mob/syndicate_doctor_brown.dmi', icon_state = "qualified_doctor"),
		"Qualified Doctor RE" = image(icon = 'modular_pentest/modules/robots/icons/mob/syndicate_doctor_red.dmi', icon_state = "qualified_doctor"),
		)
		synd_med_icons = sortList(synd_med_icons)
	var/synd_med_borg_icon = show_radial_menu(R, R , synd_med_icons, custom_check = CALLBACK(src, PROC_REF(check_menu), R), radius = 42, require_near = TRUE)
	switch(synd_med_borg_icon)
		if("Syndicate Model M")
			cyborg_base_icon = "synd_medical"
			cyborg_icon_override = 'icons/mob/robots.dmi'
			special_light_key = "synd_medical"
		if("Qualified Doctor BL")
			cyborg_base_icon = "qualified_doctor"
			cyborg_icon_override = 'modular_pentest/modules/robots/icons/mob/syndicate_doctor_black.dmi'
			special_light_key = "qualified_doctor"
		if("Qualified Doctor BR")
			cyborg_base_icon = "qualified_doctor"
			cyborg_icon_override = 'modular_pentest/modules/robots/icons/mob/syndicate_doctor_brown.dmi'
			special_light_key = "qualified_doctor"
		if("Qualified Doctor RE")
			cyborg_base_icon = "qualified_doctor"
			cyborg_icon_override = 'modular_pentest/modules/robots/icons/mob/syndicate_doctor_red.dmi'
			special_light_key = "qualified_doctor"
		else
			return FALSE
	return ..()

/obj/item/robot_module/saboteur
	name = "Syndicate Saboteur"
	basic_modules = list(
		/obj/item/assembly/flash/cyborg,
		/obj/item/borg/sight/thermal,
		/obj/item/construction/rcd/borg/syndicate,
		/obj/item/pipe_dispenser,
		/obj/item/restraints/handcuffs/cable/zipties,
		/obj/item/extinguisher,
		/obj/item/weldingtool/largetank/cyborg,
		/obj/item/borg/cyborg_omnitool/engineering,
		/obj/item/borg/cyborg_omnitool/engineering,
		/obj/item/borg/cyborg_omnitool/engineering,
		/obj/item/t_scanner,
		/obj/item/analyzer,
		/obj/item/geiger_counter/cyborg,
		/obj/item/assembly/signaler/cyborg,
		/obj/item/areaeditor/shuttle/cyborg,
		/obj/item/electroadaptive_pseudocircuit,
		/obj/item/stack/sheet/metal/cyborg,
		/obj/item/stack/sheet/glass/cyborg,
		/obj/item/stack/sheet/rglass/cyborg,
		/obj/item/borg/apparatus/sheet_manipulator,
		/obj/item/stack/rods/cyborg,
		/obj/item/stack/tile/plasteel/cyborg,
		/obj/item/destTagger/borg,
		/obj/item/stack/cable_coil/cyborg,
		/obj/item/borg_chameleon,
		/obj/item/card/emag/borg,
		)

	cyborg_base_icon = "synd_engi"
	moduleselect_icon = "malf"
	can_be_pushed = FALSE
	magpulsing = TRUE
	hat_offset = -4
	canDispose = TRUE

/datum/robot_energy_storage
	var/name = "Generic energy storage"
	var/max_energy = 30000
	var/recharge_rate = 1000
	var/energy

/datum/robot_energy_storage/New(obj/item/robot_module/R = null)
	energy = max_energy
	if(R)
		R.storages |= src
	return

/datum/robot_energy_storage/proc/use_charge(amount)
	if (energy >= amount)
		energy -= amount
		if (energy == 0)
			return 1
		return 2
	else
		return 0

/datum/robot_energy_storage/proc/add_charge(amount)
	energy = min(energy + amount, max_energy)

/datum/robot_energy_storage/metal
	name = "Metal Synthesizer"

/datum/robot_energy_storage/glass
	name = "Glass Synthesizer"

/datum/robot_energy_storage/wire
	max_energy = 50
	recharge_rate = 2
	name = "Wire Synthesizer"

/datum/robot_energy_storage/medical
	max_energy = 2500
	recharge_rate = 250
	name = "Medical Synthesizer"

/datum/robot_energy_storage/beacon
	max_energy = 30
	recharge_rate = 1

	name = "Marker Beacon Storage"

//
// SYNDICATE SEC CYBORG - BOARD AND UPGRADE CODE
//

/obj/item/borg/upgrade/syndicate
	name = "illegal equipment module"
	desc = "Unlocks the hidden, deadlier functions of a cyborg."
	icon_state = "module_illegal"
	require_model = TRUE

/obj/item/borg/upgrade/syndicate/action(mob/living/silicon/robot/R, user = usr)
	. = ..()
	if(.)
		if(R.emagged)
			return FALSE

		R.SetEmagged(1)
		R.logevent("WARN: hardware installed with missing security certificate!") //A bit of fluff to hint it was an illegal tech item
		R.logevent("WARN: root privleges granted to PID [num2hex(rand(1,65535), -1)][num2hex(rand(1,65535), -1)].") //random eight digit hex value. Two are used because rand(1,4294967295) throws an error

		return TRUE

/obj/item/borg/upgrade/syndicate/deactivate(mob/living/silicon/robot/R, user = usr)
	. = ..()
	if (.)
		R.SetEmagged(FALSE)

//
// SYNDICATE BRIGADOR CYBORG - BOARD
//

/obj/item/borg/upgrade/transform/commando
	name = "MODPICK!1(BRIGADOR)PROTOTYPE"
	icon_state = "module_illegal"
	desc = "A module picking system, capable of using stored matter to build itself out into a fresh cyborg configuration. This one has no serial number, and no identifying marks, save a single piece of tape with the module's classification written in sharpie."
	new_module = /obj/item/robot_module/syndieproto

//
// SYNDICATE ENGINEERING CYBORG - BOARD
//

/obj/item/borg/upgrade/transform/assault
	name = "unknown cyborg module"
	icon_state = "module_illegal"
	desc = "A module picking system, capable of using stored matter to build itself out into a fresh cyborg configuration. This one has no serial number, and no identifying marks."
	new_module = /obj/item/robot_module/syndicate

//
// SYNDICATE MEDICAL BORG - VAR OVERRIDE
//

/obj/item/reagent_containers/borghypo/syndicate
	reagent_ids = list(/datum/reagent/medicine/syndicate_nanites, /datum/reagent/medicine/potass_iodide, /datum/reagent/medicine/morphine, /datum/reagent/medicine/rezadone)
