/*
		New Code

		Purpose of modularization:
			Currently shiptest does not have, or appear to have any desire to port over omnitool code from TG station.
			Partial Omni tool code already exists inside debug_tems.dm and that is actually the same code that is used
			when it comes to player held omnitool devices in TG Station Code.

			This code is set aside to prevent any future edits by Shiptest, to prevent future errors and/or conflicts.

			The code located here should work indepentandly of any and all edits to the code/game/objects/items/debug_items.dm code
			except in the case of another varient of cyborg_omnitools being created.

			In the case of Shiptest implimenting their own varient of omnitool code, a review of functionality should be conducted.
			If the code provided by shiptest is simular and operates in a manner that can replace this file, then it should be used
			in lieu of this code to reduce modularizeation drift.

			- Ossa

		Code Contained Here:
			The code contained within this file is for cyborg omnitool and its functionality
*/

/obj/item/borg/cyborg_omnitool
	name = "cyborg omni-toolset"
	desc = "You shouldn't see this in-game normally."
	icon = 'modular_pentest/modules/robots/icons/obj/borg_tools.dmi'
	icon_state = "toolkit_medborg"
	force = 10

	///our tools (list of item typepaths)
	var/list/obj/item/omni_toolkit = list()
	///Map of solid objects internally used by the omni tool
	var/list/obj/item/atoms = list()
	///object we are referencing to for force, sharpness and sound
	var/obj/item/reference
	//is the toolset upgraded or not
	var/upgraded = FALSE

/obj/item/borg/cyborg_omnitool/Destroy(force)
	for(var/obj/item/tool_path as anything in atoms)
		var/obj/item/tool = atoms[tool_path]
		if(!QDELETED(tool)) //if we are sharing tools from our other omnitool brothers we don't want to re delete them if they got deleted first
			qdel(tool)
	atoms.Cut()

	return ..()

// Proc Code: code/game/objects/items/debug_items.dm
/obj/item/borg/cyborg_omnitool/get_all_tool_behaviours()
	. = list()
	for(var/obj/item/tool as anything in omni_toolkit)
		. += initial(tool.tool_behaviour)

//The omnitool interacts with real world objects based on the state it has assumed
/obj/item/borg/cyborg_omnitool/get_proxy_attacker_for(atom/target, mob/user)
	if(!reference)
		return src

	//first check if we have the tool
	var/obj/item/tool = atoms[reference]
	if(!QDELETED(tool))
		return tool

	//else try to borrow an in-built tool from our other omnitool brothers to save & share memory & such
	var/mob/living/silicon/robot/borg = user
	for(var/obj/item/borg/cyborg_omnitool/omni_tool in borg.module)
		if(omni_tool == src)
			continue
		tool = omni_tool.atoms[reference]
		if(!QDELETED(tool))
			atoms[reference] = tool
			return tool

	//if all else fails just make a new one from scratch
	tool = new reference(user)
	ADD_TRAIT(tool, TRAIT_NODROP, CYBORG_ITEM_TRAIT)
	atoms[reference] = tool
	return tool

/obj/item/borg/cyborg_omnitool/attack_self(mob/user)
	//build the radial menu options
	var/list/radial_menu_options = list()
	for(var/obj/item as anything in omni_toolkit)
		radial_menu_options[initial(item.name)] = image(icon = initial(item.icon), icon_state = initial(item.icon_state))

	//assign the new tool behaviour
	var/toolkit_menu = show_radial_menu(user, src, radial_menu_options, require_near = TRUE, tooltips = TRUE)

	//set the reference & update icons
	for(var/obj/item/tool as anything in omni_toolkit)
		if(initial(tool.name) == toolkit_menu)
			reference = tool
			tool_behaviour = initial(tool.tool_behaviour)
			update_appearance(UPDATE_ICON_STATE)
			playsound(src, 'modular_pentest/modules/robots/sound/change_jaws.ogg', 50, TRUE)
			break

/obj/item/borg/cyborg_omnitool/update_icon_state()
	if (reference)
		icon_state = reference.icon_state
	return ..()

/**
 * Is this omni tool upgraded or not
 * Arguments
 *
 * * upgrade - TRUE/FALSE for upgraded
 */
/obj/item/borg/cyborg_omnitool/proc/set_upgraded(upgrade)
	upgraded = upgraded

	playsound(src, 'modular_pentest/modules/robots/sound/change_jaws.ogg', 50, TRUE)

//
//	Medical Omnitool
//

/obj/item/borg/cyborg_omnitool/medical
	name = "surgical omni-toolset"
	desc = "A set of surgical tools used by cyborgs to operate on various surgical operations."
	item_flags = SURGICAL_TOOL

	omni_toolkit = list(
		/obj/item/scalpel/cyborg,
		/obj/item/surgicaldrill/cyborg,
		/obj/item/hemostat/cyborg,
		/obj/item/retractor/cyborg,
		/obj/item/cautery/cyborg,
		/obj/item/circular_saw/cyborg,
		)

//
//	Engineering Omnitool
//
//	Toolset for engineering cyborgs, this is all of the tools except for the welding tool. since it's quite hard to implement (read:can't be arsed to)
//

/obj/item/borg/cyborg_omnitool/engineering
	name = "engineering omni-toolset"
	desc = "A set of engineering tools used by cyborgs to conduct various engineering tasks."
	icon = 'modular_pentest/modules/robots/icons/obj/borg_tools.dmi'
	icon_state = "toolkit_engiborg"
	var/obj/machinery/buffer

	omni_toolkit = list(
		/obj/item/wrench/cyborg,
		/obj/item/wirecutters/cyborg,
		/obj/item/screwdriver/cyborg,
		/obj/item/crowbar/cyborg,
		/obj/item/multitool/cyborg,
	)

/obj/item/borg/cyborg_omnitool/engineering/examine(mob/user)
	. = ..()

	if(tool_behaviour == TOOL_MULTITOOL)
		for(var/obj/item/multitool/tool in atoms)
			. += "Its multitool buffer contains [tool.buffer]"
			break

//
//	Service/Botany Omnitool
//

/obj/item/borg/cyborg_omnitool/botany
	name = "botanical omni-toolset"
	desc = "A set of botanical tools used by cyborgs to do gardening."
	icon = 'modular_pentest/modules/robots/icons/obj/borg_tools.dmi'
	icon_state = "sili"

	omni_toolkit = list(
		/obj/item/cultivator/cyborg,
		/obj/item/hatchet/cyborg,
		/obj/item/shovel/spade/cyborg,
	)
