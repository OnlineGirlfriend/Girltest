/*
		SCIENCE MODULES
*/

/obj/item/robot_module/science
	name = "Science"
	basic_modules = list(
		/obj/item/assembly/flash/cyborg,
		/obj/item/borg/apparatus/beaker,
		/obj/item/binoculars,
		/obj/item/reagent_containers/dropper,
		/obj/item/reagent_containers/syringe,
		/obj/item/weldingtool/largetank/cyborg,
		/obj/item/borg/cyborg_omnitool/engineering,
		/obj/item/borg/cyborg_omnitool/medical,
		/obj/item/analyzer,
		/obj/item/geiger_counter/cyborg,
		/obj/item/assembly/signaler/cyborg,
		/obj/item/extinguisher,
		/obj/item/pen,
		/obj/item/clipboard/cyborg,
		/obj/item/survey_handheld,
		/obj/item/borg/apparatus/science/,
		/obj/item/stack/cable_coil/cyborg,
		)
	emag_modules = list(/obj/item/hand_tele)
	cyborg_base_icon = "omoikane"
	moduleselect_icon = "standard"
	can_be_pushed = FALSE
	hat_offset = -2

/obj/item/robot_module/science/be_transformed_to(obj/item/robot_module/old_module)
	var/mob/living/silicon/robot/R = loc
	var/static/list/sci_icons
	if(!sci_icons)
		sci_icons = list(
			"Omoikane" = image(icon = 'icons/mob/robots.dmi', icon_state = "omoikane"),
			"Sci Droid" = image(icon = 'modular_pentest/modules/robots/icons/mob/science.dmi', icon_state = "droid-science"),
			"Sci Marina" = image(icon = 'modular_pentest/modules/robots/icons/mob/science.dmi', icon_state = "marinaSCI"),
			"Sci Drone" = image(icon = 'modular_pentest/modules/robots/icons/mob/science.dmi', icon_state = "drone-science"),
			"Science Mk 2" = image(icon = 'modular_pentest/modules/robots/icons/mob/science.dmi', icon_state = "mk2"),
			"Science Mk 3" = image(icon = 'modular_pentest/modules/robots/icons/mob/science.dmi', icon_state = "mk3"),
			"Rover" = image(icon = 'modular_pentest/modules/robots/icons/mob/science.dmi', icon_state = "Rover"),
			"Brain in a Jar" = image(icon = 'modular_pentest/modules/robots/icons/mob/science.dmi', icon_state = "brainjar"),
		)
		sci_icons = sortList(sci_icons)
	var/sci_borg_icon = show_radial_menu(R, R , sci_icons, custom_check = CALLBACK(src, PROC_REF(check_menu), R), radius = 42, require_near = TRUE)
	switch(sci_borg_icon)
		if("Omoikane")
			cyborg_base_icon = "omoikane"
		if("Sci Droid")
			cyborg_base_icon = "droid-science"
			cyborg_icon_override = 'modular_pentest/modules/robots/icons/mob/science.dmi'
			special_light_key = "droid-science"
		if("Sci Marina")
			cyborg_base_icon = "marinaSCI"
			cyborg_icon_override = 'modular_pentest/modules/robots/icons/mob/science.dmi'
			special_light_key = "marinaSCI"
		if("Sci Drone")
			cyborg_base_icon = "drone-science"
			cyborg_icon_override = 'modular_pentest/modules/robots/icons/mob/science.dmi'
			special_light_key = "drone-science"
		if("Science Mk 2")
			cyborg_base_icon = "mk2"
			cyborg_icon_override = 'modular_pentest/modules/robots/icons/mob/science.dmi'
			special_light_key = "mk2"
		if("Science Mk 3")
			cyborg_base_icon = "mk3"
			cyborg_icon_override = 'modular_pentest/modules/robots/icons/mob/science.dmi'
			special_light_key = "mk3"
		if("Rover")
			cyborg_base_icon = "Rover"
			cyborg_icon_override = 'modular_pentest/modules/robots/icons/mob/science.dmi'
			special_light_key = "Rover"
		if("Brain in a Jar")
			cyborg_base_icon = "brainjar"
			cyborg_icon_override = 'modular_pentest/modules/robots/icons/mob/science.dmi'
			special_light_key = "brainjar"
		else
			return FALSE
	return ..()

//
// SCIENCE APPARATUS - CODE
//

/obj/item/borg/apparatus/science
	name = "science apparatus"
	desc = "A special apparatus for carrying paper, research notes, slime cores, strange relics and assembling mechs."
	icon = 'modular_pentest/modules/robots/icons/obj/borg_tools.dmi'
	icon_state = "borg_service_apparatus"
	storable = list(
		/obj/item/paper,
		/obj/item/research_notes,
		/obj/item/slime_extract,
		/obj/item/relic,
		/obj/item/assembly/signaler/anomaly,
		/obj/item/circuitboard/mecha,
		/obj/item/mecha_parts,
		/obj/item/stock_parts,
	)

/obj/item/borg/apparatus/science/Initialize(mapload)
	update_appearance()
	return ..()

/obj/item/borg/apparatus/science/update_overlays()
	. = ..()
	var/mutable_appearance/arm = mutable_appearance(icon, "borg_hardware_apparatus_arm1")
	if(stored)
		stored.pixel_x = -3
		stored.pixel_y = 0
		if((!istype(stored, /obj/item/food)))
			arm.icon_state = "borg_hardware_apparatus_arm2"
		var/mutable_appearance/stored_copy = new /mutable_appearance(stored)
		stored_copy.layer = FLOAT_LAYER
		stored_copy.plane = FLOAT_PLANE
		. += stored_copy
	. += arm

/obj/item/borg/apparatus/science/examine()
	. = ..()
	if(stored)
		. += "The apparatus currently has [stored] secured."
		. += span_notice("<i>Alt-click</i> will drop the currently secured item.")

//
// SURVEY SCANNER UPGRADE - BOARD AND UPGRADE CODE
//

/obj/item/borg/upgrade/surveyscanner
	name = "science cyborg elite survey scanner"
	desc = "An elite survey scanner replacement for the science module's standard scanner."
	icon_state = "module_science"
	require_model = TRUE
	model_type = list(/obj/item/robot_module/science)

	items_to_add = list(/obj/item/survey_handheld/elite)
	items_to_remove = list(/obj/item/survey_handheld)

//
// SURVEY SCANNER UPGRADE DESIGN - mechfabricator_designs.dm
//

/datum/design/borg_upgrade_surveyscanner
	name = "Survey Scanner"
	id = "borg_upgrade_survey_scanner"
	build_type = MECHFAB
	build_path = /obj/item/borg/upgrade/surveyscanner
	materials = list(
		/datum/material/iron = 5000,
		/datum/material/silver = 5000,
		/datum/material/gold = 3000,
		/datum/material/uranium = 3000,
		/datum/material/diamond = 2000,
	)
	construction_time = 90
	category = list("Cyborg Upgrade Modules")

//
// CYBORG CLIPBOARD - CODE
//

/obj/item/clipboard/cyborg
	name = "\improper integrated clipboard"
	desc = "A clipboard which seems to come adapted with a paper synthetizer, carefully hidden in its paper clip."
	/// When was the last time the printer was used?
	COOLDOWN_DECLARE(printer_cooldown)
	/// How long is the integrated printer's cooldown?
	var/printer_cooldown_time = 10 SECONDS
	/// How much charge is required to print a piece of paper?
	var/paper_charge_cost = 40


/obj/item/clipboard/cyborg/Initialize(mapload)
	. = ..()
//	pen = new /obj/item/pen/cyborg


/obj/item/clipboard/cyborg/examine()
	. = ..()
	. += "Alt-click to synthesize a piece of paper."
	if(!COOLDOWN_FINISHED(src, printer_cooldown))
		. += "Its integrated paper synthesizer seems to still be on cooldown."


/obj/item/clipboard/cyborg/AltClick(mob/user)
	if(!iscyborg(user))
		to_chat(user, span_warning("You do not seem to understand how to use [src]."))
		return
	var/mob/living/silicon/robot/cyborg_user = user
	// Not enough charge? Tough luck.
	if(cyborg_user?.cell.charge < paper_charge_cost)
		to_chat(user, span_warning("Your internal cell doesn't have enough charge left to use [src]'s integrated printer."))
		return
	// Check for cooldown to avoid paper spamming
	if(COOLDOWN_FINISHED(src, printer_cooldown))
		// If there's not too much paper already, let's go
		if(!toppaper_ref || length(contents) < 10)
			cyborg_user.cell.use(paper_charge_cost)
			COOLDOWN_START(src, printer_cooldown, printer_cooldown_time)
			var/obj/item/paper/new_paper = new /obj/item/paper
			new_paper.forceMove(src)
			if(toppaper_ref)
				var/obj/item/paper/toppaper = toppaper_ref?.resolve()
				UnregisterSignal(toppaper, COMSIG_ATOM_UPDATED_ICON)
			RegisterSignal(new_paper, COMSIG_ATOM_UPDATED_ICON, PROC_REF(on_top_paper_change))
			toppaper_ref = WEAKREF(new_paper)
			update_appearance()
			to_chat(user, span_notice("[src]'s integrated printer whirs to life, spitting out a fresh piece of paper and clipping it into place."))
			return
		else
			to_chat(user, span_warning("[src]'s integrated printer refuses to print more paper, as [src] already contains enough paper."))
	else
		to_chat(user, span_warning("[src]'s integrated printer refuses to print more paper, its bluespace paper synthesizer not having finished recovering from its last synthesis."))
	return

/obj/item/clipboard/proc/on_top_paper_change()
	SIGNAL_HANDLER
	update_appearance()
