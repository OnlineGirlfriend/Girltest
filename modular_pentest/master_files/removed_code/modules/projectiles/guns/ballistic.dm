
/// Handles weapon condition. Returning TRUE prevents process_chamber from automatically loading a new round
/obj/item/gun/ballistic/condition_check(from_firing = TRUE, atom/shooter)
	if(bolt_type == BOLT_TYPE_NO_BOLT || !from_firing || !magazine.ammo_count(FALSE)) //The revolver is one of the most reliable firearms ever designed, as long as you don't need to fire any more than six bullets at something. Which, of course, you do not.
		return FALSE

	// Gun must be at least this worn out to be eligible to jam
	if(gun_wear < wear_minor_threshold)
		return FALSE

	// Increment jam timer now that we are in a jammable state
	last_jam++

	// We are going to expand the grace period well beyond the initial hard coded limit.
	// This will determine a dynamic grace period based on gun type. Since 4 bullets for a pistol is much different than 4 bullets for a HMG.
	// This will allow some more powerful bullets to be used during the predictable grace period, yet this was also the case with the hard coded 4 grace period.
	var/jam_grace = JAM_GRACE_MINOR
	if(istype(src, /obj/item/gun/ballistic/shotgun))
		jam_grace += 6 // Default 10
	else if(istype(src, /obj/item/gun/ballistic/automatic/pistol))
		jam_grace += 11 // Default 15
	else if(istype(src, /obj/item/gun/ballistic/automatic/smg))
		jam_grace += 11 // Default 15
	else if(istype(src, /obj/item/gun/ballistic/automatic/assault))
		jam_grace += 11 // Default 15
	else if(istype(src, /obj/item/gun/ballistic/automatic/hmg))
		jam_grace += 24 // default 25

	// Since we are now know the dynamic grace value, and are inside a jammable range we need to check if our grace period is still active.
	if(last_jam < jam_grace)
		return FALSE

	// Alert the player that they are crossing their grace period.
	// This allows for our dynamic grace value to give a warning that something is about to go wrong.
	// Since we are checking to see if the last_jam is equal to jam_grace that means this will trigger only once per jam.
	// While inside the grace period its already failed. Once outside the grace period, the jam rolls start.
	if(last_jam == jam_grace)
		var/list/grace_alerts = list(
			"[src.name] groans under strain...",
			"A metallic creak whispers from [src.name].",
			"[src.name]'s receiver vibrates oddly in your grip.",
			"You feel the action start to drag.",
			"There's an uneasy click from within [src.name]."
		)
		balloon_alert(shooter, pick(grace_alerts))

	// Since our dynamic grace period has worn off we need to roll to jam.
	if(gun_wear >= wear_major_threshold ? prob(JAM_CHANCE_MAJOR / 2) : prob(JAM_CHANCE_MINOR / 2))
		bolt_locked = TRUE
		last_jam = 0 // sighs and erases number on whiteboard
		var/list/jam_alerts = list(
			"Jammed!",
			"*click* — Nothing happens.",
			"The bolt locks up!",
			"Something inside [src.name] grinds to a halt!",
			"You feel resistance — it's jammed!",
			"[src.name] emits a sharp *click*! It's jammed!"
		)
		balloon_alert(shooter, pick(jam_alerts))
		playsound(src, 'sound/weapons/gun/general/dry_fire_old.ogg', 50, TRUE, -15) //click. uhoh.
		return TRUE

// So lets go about making the wear less predictable.
// The idea here is that over time a gun breaks down, but why should all guns wear down at the same exact time when under the same conditions?
// This will apply an amount of randomization meaning luck is at play.

/obj/item/gun/ballistic/adjust_wear(amt)
	// If the wear being applied is greater than 0
	if(amt > 0)

		// A well kept gun will not wear down as much.
		// Only apply wear avoidance if the gun is below its minor threshold
		if(gun_wear < wear_minor_threshold)

			// Applies a flat 25% chance that your shot will no trigger durability.
			// This is a catch all in case I missed a weapon typing.
			// This can also be adjusted on a per weapon basis but for now lets just apply it based on type of weapon.
			var/base_avoid_chance = 25

			// Builds a dynamic value for avoidance based on weapon type.
			if(istype(src, /obj/item/gun/ballistic/shotgun))
				base_avoid_chance = 25
			else if(istype(src, /obj/item/gun/ballistic/automatic/pistol))
				base_avoid_chance = 35
			else if(istype(src, /obj/item/gun/ballistic/automatic/assault))
				base_avoid_chance = 45
			else if(istype(src, /obj/item/gun/ballistic/automatic/smg))
				base_avoid_chance = 40
			else if(istype(src, /obj/item/gun/ballistic/automatic/hmg))
				base_avoid_chance = 30

			// Scale avoid chance based on current condition (linear scaling)
			var/scale = 1 - (gun_wear / wear_minor_threshold)
			var/final_avoid_chance = round(base_avoid_chance * scale)

			// Applies the new dynamic final_avoid_chance at a liner scale to see if the shot being fired actually did any long lasting wear.
			// At 0 Wear the avoid chance for the SMG would be 40%
			// At 60 wear the avoid chance would be 20%
			// at 120 wear the avoid chance would be at 0%
			if(prob(final_avoid_chance))
				// DEBUG ONLY - Just to test whenever a avoid happens
				//balloon_alert(usr, "[src.name] avoided wear ([final_avoid_chance]% chance)")
				return // Wear was avoided

		// Finally apply the wear to the gun
		gun_wear = round(clamp(gun_wear + wear_rate * amt, 0, wear_maximum), 0.01)
	else
		gun_wear = round(clamp(gun_wear + clean_rate * amt, 0, wear_maximum), 0.01)

// Next lets work on these examine_more.
// The old version was rather straight forward and did not really explain too much.
/obj/item/gun/ballistic/examine_more(mob/user)
	. = ..()
	if(bolt_type != BOLT_TYPE_NO_BOLT && wear_rate)
		. += "You can [bolt_wording] [src] by pressing the <b>unique action</b> key. By default, this is <b>space</b>"

		var/conditionstr
		var/minorhalf = wear_minor_threshold / 2
		var/majorhalf = wear_minor_threshold + (wear_major_threshold - wear_minor_threshold) / 2

		if(gun_wear <= minorhalf)
			conditionstr = span_green("looks pristine, well-maintained.")
		else if(gun_wear <= wear_minor_threshold)
			conditionstr = span_nicegreen("shows minor signs of use, but remains reliable.")
		else if(gun_wear <= majorhalf)
			conditionstr = span_red("creaks and rattles — signs of wear are clear.")
		else if(gun_wear <= wear_major_threshold)
			conditionstr = span_warning("looks heavily worn; malfunctions are likely.")
		else
			conditionstr = span_boldwarning("appears critically damaged and barely functional!")

		. += "<br>[src] [conditionstr]"


// But is this more fun version?
// But then again can you make a gun jamming 'fun'?
//
// Honestly, this is just a more forgivable varient of the code... it allows a little more grace period, more time for players to plan out their moves.
// Randomizes when a gun actually hits the minor_treshold and then becomes predictable after the fact.
//
// We might need to look into more dynamic or just a overall better varient of the concept.
