#define JUMP_STATE_OFF 0
#define JUMP_STATE_CHARGING 1
#define JUMP_STATE_IONIZING 2
#define JUMP_STATE_FIRING 3
#define JUMP_STATE_FINALIZED 4
#define JUMP_CHARGE_DELAY (20 SECONDS)
#define JUMP_CHARGEUP_TIME (3 MINUTES)
/obj/machinery/computer/helm/ui_act(action, list/params, datum/tgui/ui, datum/ui_state/state)
	. = ..()
	if(.)
		return
	if(viewer)
		return
	if(!current_ship)
		return
	if(check_keylock())
		return
	. = TRUE

	switch(action) // Universal topics
		if("rename_ship")
			var/new_name = params["newName"]
			if(!new_name)
				return
			new_name = trim(new_name)
			if (!length(new_name) || new_name == current_ship.name)
				return
			if(!reject_bad_text(new_name, MAX_CHARTER_LEN))
				say("Error: Replacement designation rejected by system.")
				return
			if(!current_ship.Rename(new_name))
				say("Error: [COOLDOWN_TIMELEFT(current_ship, rename_cooldown)/10] seconds until ship designation can be changed.")
			update_static_data(usr, ui)
			return
		if("reload_ship")
			reload_ship()
			update_static_data(usr, ui)
			return
		if("reload_engines")
			current_ship.refresh_engines()
			return
		if("toggle_ai_control")
			if(issilicon(usr))
				to_chat(usr, "<span class='warning'>You are unable to toggle AI controls.</span>")
				return
			allow_ai_control = !allow_ai_control
			say(allow_ai_control ? "AI Control has been enabled." : "AI Control is now disabled.")
			return

	if(jump_state != JUMP_STATE_OFF)
		say("Bluespace Jump in progress. Controls suspended.")
		return

	if(!current_ship.docked_to && !current_ship.docking)
		switch(action)
			if("act_overmap")
				if(SSshuttle.jump_mode > BS_JUMP_CALLED)
					to_chat(usr, "<span class='warning'>Cannot dock due to bluespace jump preperations!</span>")
					return
				var/datum/overmap/to_act = locate(params["ship_to_act"]) in current_ship.get_nearby_overmap_objects(include_docked = TRUE)
				say(current_ship.Dock(to_act))
				return
			if("toggle_engine")
				var/datum/weakref/engine = locate(params["engine"]) in current_ship.shuttle_port.engine_list
				var/obj/machinery/power/shuttle/engine/real_engine = engine.resolve()
				if(!real_engine)
					current_ship.shuttle_port.engine_list -= engine
					return
				real_engine.enabled = !real_engine.enabled
				real_engine.update_icon_state()
				current_ship.refresh_engines()
				return
			if("change_burn_percentage")
				var/new_percentage = clamp(text2num(params["percentage"]), 1, 100)
				current_ship.burn_percentage = new_percentage
				return
			if("change_heading")
				var/new_direction = text2num(params["dir"])
				if(new_direction == current_ship.burn_direction)
					current_ship.change_heading(BURN_NONE)
					return
				current_ship.change_heading(new_direction)
				return
			if("stop")
				if(current_ship.burn_direction == BURN_NONE)
					current_ship.change_heading(BURN_STOP)
					return
				current_ship.change_heading(BURN_NONE)
				return
			if("bluespace_jump")
				if(calibrating)
					cancel_jump()
					return
				if(!current_ship.shipkey == usr.get_active_held_item())
						to_chat(usr, "<span class='warning'>You must have the key.</span>")
						return
				else
					if(tgui_alert(usr, "Do you want to bluespace jump? Your ship and everything on it will be removed from the round.", "Jump Confirmation", list("Yes", "No")) != "Yes")
						return
					calibrate_jump()
					return
			if("dock_empty")
				current_ship.dock_in_empty_space(usr)
				return
	else if(current_ship.docked_to)
		if(action == "undock")
			current_ship.calculate_avg_fuel()
			if(current_ship.avg_fuel_amnt < 25 && tgui_alert(usr, "Ship only has ~[round(current_ship.avg_fuel_amnt)]% fuel remaining! Are you sure you want to undock?", name, list("Yes", "No")) != "Yes")
				return
			current_ship.Undock()

#undef JUMP_STATE_OFF
#undef JUMP_STATE_CHARGING
#undef JUMP_STATE_IONIZING
#undef JUMP_STATE_FIRING
#undef JUMP_STATE_FINALIZED
#undef JUMP_CHARGE_DELAY
#undef JUMP_CHARGEUP_TIME
