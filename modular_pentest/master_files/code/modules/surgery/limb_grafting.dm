/datum/surgery_step/graft_limb
	implements = list(
		/obj/item/bodypart = 100,
		/obj/item/organ_storage = 100,
		/obj/item/chainsaw = 100,
		/obj/item/melee/synthetic_arm_blade = 100,
		/obj/item/gun/ballistic/shotgun/mounted = 100)

///datum/surgery_step/graft_limb/ // grafting override
/datum/surgery_step/graft_limb/proc/success(mob/user, mob/living/carbon/target, target_zone, obj/item/tool, datum/surgery/surgery, default_display_results = FALSE)
		//. = ..(user, target, target_zone, tool, surgery, default_display_results)
	if(istype(tool, /obj/item/organ_storage))
		tool.icon_state = initial(tool.icon_state)
		tool.desc = initial(tool.desc)
		tool.cut_overlays()
		tool = tool.contents[1]

	if(istype(tool, /obj/item/bodypart) && user.temporarilyRemoveItemFromInventory(tool)) // Normal body parts
		var/obj/item/bodypart/L = tool
		if(!L.attach_limb(target))
			display_results(user, target, "<span class='warning'>You fail in replacing [target]'s [parse_zone(target_zone)]! Their body has rejected [tool]!</span>",
				"<span class='warning'>[user] fails to replace [target]'s [parse_zone(target_zone)]!</span>",
				"<span class='warning'>[user] fails to replace [target]'s [parse_zone(target_zone)]!</span>")
			L.forceMove(target.loc)
			return

		if(organ_rejection_dam)
			target.adjustToxLoss(organ_rejection_dam)
			experience_given -= (round(organ_rejection_dam/10))
		display_results(user, target, "<span class='notice'>You succeed in replacing [target]'s [parse_zone(target_zone)].</span>",
			"<span class='notice'>[user] successfully replaces [target]'s [parse_zone(target_zone)] with [tool]!</span>",
			"<span class='notice'>[user] successfully replaces [target]'s [parse_zone(target_zone)]!</span>")
		return

	else
		if(medical_malpractice(user, target, target_zone, tool)) // Unconventional grafting
			return
		else
			display_results(user, target, "<span class='warning'>You fail in attaching [target]'s [parse_zone(target_zone)]! Their body has rejected [tool]!</span>",
				"<span class='warning'>[user] fails to attach [target]'s [parse_zone(target_zone)]!</span>",
				"<span class='warning'>[user] fails to attach [target]'s [parse_zone(target_zone)]!</span>")

// Medical malpractice <3 Handles unconventional limbs

/proc/medical_malpractice(mob/user, mob/living/carbon/target, target_zone, obj/item/tool)
	if(istype(tool, /obj/item/chainsaw))
		var/obj/item/mounted_chainsaw/new_arm = new(target)
		target_zone == BODY_ZONE_R_ARM ? target.put_in_r_hand(new_arm) : target.put_in_l_hand(new_arm)
		qdel(tool)
		return TRUE

	if(istype(tool, /obj/item/melee/synthetic_arm_blade))
		var/obj/item/melee/arm_blade/new_arm = new(target, TRUE, TRUE)
		target_zone == BODY_ZONE_R_ARM ? target.put_in_r_hand(new_arm) : target.put_in_l_hand(new_arm)
		qdel(tool)
		return TRUE

	if(istype(tool, /obj/item/gun/ballistic/shotgun/mounted))
		var/obj/item/gun/ballistic/shotgun/mounted/on/new_arm = new(target)
		target_zone == BODY_ZONE_R_ARM ? target.put_in_r_hand(new_arm) : target.put_in_l_hand(new_arm)
		qdel(tool)
		return TRUE

	return FALSE

/datum/surgery/limb_grafting/unconventional
	name = "Limb grafting"
	steps = list(
		/datum/surgery_step/incise,
		/datum/surgery_step/clamp_bleeders,
		/datum/surgery_step/retract_skin,
		/datum/surgery_step/graft_limb/unconventional // magical
	)
	target_mobtypes = list(
		/mob/living/carbon/human,
		/mob/living/carbon/monkey,
		/mob/living/silicon
	)
	possible_locs = list(BODY_ZONE_R_ARM, BODY_ZONE_L_ARM, BODY_ZONE_L_LEG, BODY_ZONE_R_LEG, BODY_ZONE_HEAD)
	requires_bodypart = FALSE
	requires_bodypart_type = 0
