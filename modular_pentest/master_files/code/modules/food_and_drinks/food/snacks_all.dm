//
// snacks_burgers.dm
//

/obj/item/reagent_containers/food/snacks/burger/plain
	desc = "A Terran culinary cornerstone: a beef patty between a sliced bun or roll, with additional condiments and ingredients included between them."

/obj/item/reagent_containers/food/snacks/burger/baconburger
	desc = "A commonly observed variation of the Terran hamburger. The cuts of bacon add a pleasant crunch."

/obj/item/reagent_containers/food/snacks/burger/fish
	desc = "A breaded and fried square of fish, usually with tartar sauce and cheese kept between a sliced, steamed bun."

/obj/item/reagent_containers/food/snacks/burger/rib
	name = "mcrib"
	desc = "A long hamburger with an imitiation of a shortrib, smothered in barbeque sauce and onions. No one's sure where the name originates from, beyond its terran origins."

/obj/item/reagent_containers/food/snacks/burger/mcguffin
	name = "mcguffin"
	desc = "A sliced intersolar muffin with a patty-shaped steamed and fried egg between. No one's sure where the name originates from, beyond its terran origins."

/obj/item/reagent_containers/food/snacks/burger/human
	var/subjectname = ""
	var/subjectjob = null
	name = "human burger"
	desc = "A hamburger prepared with an oddly lean cut of meat. Something feels off..."
	bonus_reagents = list(/datum/reagent/consumable/nutriment/vitamin = 4)
	tastes = list("bun" = 2, "long pork" = 4)
	foodtype = MEAT | GRAIN | GORE

/obj/item/reagent_containers/food/snacks/burger/human/CheckParts(list/parts_list)
	..()
	var/obj/item/reagent_containers/food/snacks/meat/M = locate(/obj/item/reagent_containers/food/snacks/meat/steak/plain/human) in contents
	if(M)
		subjectname = M.subjectname
		subjectjob = M.subjectjob
		if(subjectname)
			name = "[subjectname] burger"
		else if(subjectjob)
			name = "[subjectjob] burger"
		qdel(M)

/obj/item/reagent_containers/food/snacks/burger/corgi
	name = "corgi burger"
	desc = "A hamburger prepared with dog meat. An aura of desperation hangs around it..."
	bonus_reagents = list(/datum/reagent/consumable/nutriment/vitamin = 5)
	foodtype = GRAIN | MEAT | GORE

/obj/item/reagent_containers/food/snacks/burger/appendix
	name = "appendix burger"
	desc = "A hamburger made with an appendix, a vestigial organ from human beings. That doesn't make this count as a culinary delicacy."
	bonus_reagents = list(/datum/reagent/consumable/nutriment = 6, /datum/reagent/consumable/nutriment/vitamin = 6)
	icon_state = "appendixburger"
	tastes = list("bun" = 4, "vestigial meat" = 2)
	foodtype = GRAIN | MEAT | GORE

/obj/item/reagent_containers/food/snacks/burger/bearger
	name = "bearger"
	desc = "A hamburger made from a local variant of ursa stellaris. It's a challenge to tear a bite out of it."
	icon_state = "bearger"
	bonus_reagents = list(/datum/reagent/consumable/nutriment = 3, /datum/reagent/consumable/nutriment/vitamin = 6)
	foodtype = GRAIN | MEAT

/obj/item/reagent_containers/food/snacks/burger/clown
	name = "clown burger"
	desc = "A hamburger made out of bananas, shaped into a loose patty, and garnished with... is this a prank?"
	icon_state = "clownburger"
	bonus_reagents = list(/datum/reagent/consumable/nutriment = 4, /datum/reagent/consumable/nutriment/vitamin = 6, /datum/reagent/consumable/banana = 6)
	foodtype = GRAIN | FRUIT

/obj/item/reagent_containers/food/snacks/burger/mime
	name = "mime burger"
	desc = "A monotone-looking burger, from a bygone era. It tastes like nothing at all."
	icon_state = "mimeburger"
	bonus_reagents = list(/datum/reagent/consumable/nutriment = 4, /datum/reagent/consumable/nutriment/vitamin = 6, /datum/reagent/consumable/nothing = 6)
	foodtype = GRAIN

/obj/item/reagent_containers/food/snacks/burger/brain
	name = "brainburger"
	desc = "A hamburger whose patty is made from a brain. A... delicacy, to say the least."
	icon_state = "brainburger"
	bonus_reagents = list(/datum/reagent/consumable/nutriment = 6, /datum/reagent/medicine/mannitol = 6, /datum/reagent/consumable/nutriment/vitamin = 5)
	list_reagents = list(/datum/reagent/consumable/nutriment = 6, /datum/reagent/medicine/mannitol = 5, /datum/reagent/consumable/nutriment/vitamin = 1)
	tastes = list("bun" = 4, "soft meat" = 2)
	foodtype = GRAIN | MEAT | GORE

/obj/item/reagent_containers/food/snacks/burger/ghost
	name = "ghost burger"
	desc = "This burger oozes a sickly green substance that causes your fingers to tingle. It seems to float supernaturally..."
	icon_state = "ghostburger"
	bonus_reagents = list(/datum/reagent/consumable/nutriment = 5, /datum/reagent/consumable/nutriment/vitamin = 12, /datum/reagent/consumable/sodiumchloride = 5)
	tastes = list("frightening bun" = 2, "terrifying ooze" = 4)
	foodtype = GRAIN
	alpha = 170
	verb_say = "moans"
	verb_yell = "wails"

/obj/item/reagent_containers/food/snacks/burger/ghost/Initialize()
	. = ..()
	START_PROCESSING(SSobj, src)

/obj/item/reagent_containers/food/snacks/burger/ghost/process(seconds_per_tick)
	if(!isturf(loc)) //no floating out of bags
		return
	var/paranormal_activity = rand(100)
	switch(paranormal_activity)
		if(97 to 100)
			audible_message("[src] rattles a length of chain.")
			playsound(loc,'sound/spookoween/chain_rattling.ogg', 300, TRUE)
		if(91 to 96)
			say(pick("OoOoOoo.", "OoooOOooOoo!!"))
		if(84 to 90)
			dir = pick(NORTH, SOUTH, EAST, WEST, NORTHEAST, NORTHWEST, SOUTHEAST, SOUTHWEST)
			step(src, dir)
		if(71 to 83)
			step(src, dir)
		if(65 to 70)
			var/obj/machinery/light/L = locate(/obj/machinery/light) in view(4, src)
			if(L)
				L.flicker()
		if(62 to 64)
			playsound(loc,pick('sound/hallucinations/i_see_you1.ogg', 'sound/hallucinations/i_see_you2.ogg'), 50, TRUE, ignore_walls = FALSE)
		if(61)
			visible_message("[src] spews out a glob of ectoplasm!")
			new /obj/effect/decal/cleanable/greenglow/ecto(loc)
			playsound(loc,'sound/effects/splat.ogg', 200, TRUE)

		//If i was less lazy i would make the burger forcefeed itself to a nearby mob here.

/obj/item/reagent_containers/food/snacks/burger/ghost/Destroy()
	STOP_PROCESSING(SSobj, src)
	. = ..()

/obj/item/reagent_containers/food/snacks/burger/red
	name = "red burger"
	desc = "A food color-dyed burger. Perfect for hiding the fact it's burnt to a crisp."
	icon_state = "cburger"
	color = "#DA0000FF"
	bonus_reagents = list(/datum/reagent/colorful_reagent/powder/red = 10, /datum/reagent/consumable/nutriment/vitamin = 5)
	foodtype = GRAIN | MEAT

/obj/item/reagent_containers/food/snacks/burger/orange
	name = "orange burger"
	desc = "A food color-dyed burger. Despite the color, it contains no fruit juice."
	icon_state = "cburger"
	color = "#FF9300FF"
	bonus_reagents = list(/datum/reagent/colorful_reagent/powder/orange = 10, /datum/reagent/consumable/nutriment/vitamin = 5)
	foodtype = GRAIN | MEAT

/obj/item/reagent_containers/food/snacks/burger/yellow
	name = "yellow burger"
	desc = "A food color-dyed burger. Bright to the last bite."
	icon_state = "cburger"
	color = "#FFF200FF"
	bonus_reagents = list(/datum/reagent/colorful_reagent/powder/yellow = 10, /datum/reagent/consumable/nutriment/vitamin = 5)
	foodtype = GRAIN | MEAT

/obj/item/reagent_containers/food/snacks/burger/green
	name = "green burger"
	desc = "A food color-dyed burger. It's not tainted meat, it's painted meat!"
	icon_state = "cburger"
	color = "#A8E61DFF"
	bonus_reagents = list(/datum/reagent/colorful_reagent/powder/green = 10, /datum/reagent/consumable/nutriment/vitamin = 5)
	foodtype = GRAIN | MEAT

/obj/item/reagent_containers/food/snacks/burger/blue
	name = "blue burger"
	desc = "A food color-dyed burger. Is this blue rare?"
	icon_state = "cburger"
	color = "#00B7EFFF"
	bonus_reagents = list(/datum/reagent/colorful_reagent/powder/blue = 10, /datum/reagent/consumable/nutriment/vitamin = 5)
	foodtype = GRAIN | MEAT

/obj/item/reagent_containers/food/snacks/burger/purple
	name = "purple burger"
	desc = "A food color-dyed burger. Of a more regal line of burger."
	icon_state = "cburger"
	color = "#DA00FFFF"
	bonus_reagents = list(/datum/reagent/colorful_reagent/powder/purple = 10, /datum/reagent/consumable/nutriment/vitamin = 5)
	foodtype = GRAIN | MEAT

/obj/item/reagent_containers/food/snacks/burger/black
	name = "black burger"
	desc = "A food color-dyed burger. It looks overcooked like this..."
	icon_state = "cburger"
	color = "#1C1C1C"
	bonus_reagents = list(/datum/reagent/colorful_reagent/powder/black = 10, /datum/reagent/consumable/nutriment/vitamin = 5)
	foodtype = GRAIN | MEAT

/obj/item/reagent_containers/food/snacks/burger/white
	name = "white burger"
	desc = "A food color-dyed burger. Pale as a sheet..."
	icon_state = "cburger"
	color = "#FFFFFF"
	bonus_reagents = list(/datum/reagent/colorful_reagent/powder/white = 10, /datum/reagent/consumable/nutriment/vitamin = 5)
	foodtype = GRAIN | MEAT

/obj/item/reagent_containers/food/snacks/burger/spell
	name = "mage burger"
	desc = "A decorated hamburger in the style of a wizard. Usually found alongside a warriorburger and a priestburger."
	icon_state = "spellburger"
	bonus_reagents = list(/datum/reagent/consumable/nutriment = 6, /datum/reagent/consumable/nutriment/vitamin = 10)
	tastes = list("bun" = 4, "spell components" = 2)
	foodtype = GRAIN | MEAT

/obj/item/reagent_containers/food/snacks/burger/baseball
	name = "home run baseball burger"
	desc = "A hamburger with a crushed baseball instead of a beef patty. The leather is technically edible, but..."
	icon_state = "baseball"
	bonus_reagents = list(/datum/reagent/consumable/nutriment = 1, /datum/reagent/consumable/nutriment/vitamin = 1)
	foodtype = GRAIN | GROSS

//
// snacks_egg.dm
//


//
// snacks_frozen.dm
//

/obj/item/reagent_containers/food/snacks/honkdae
	icon_state = "honkdae"

/obj/item/reagent_containers/food/snacks/cornuto
	desc = "A neapolitan vanilla and chocolate icecream cone. It menaces with a sprinkling of caramelized nuts."

/obj/item/reagent_containers/food/snacks/snowcones/spacemountainwind
	name = "Space Mountain Wind snowcone"
	desc = "Space Mountain Wind drizzled over a snowball in a paper cup."
	list_reagents = list(/datum/reagent/consumable/nutriment = 1, /datum/reagent/consumable/spacemountainwind = 5)

/obj/item/reagent_containers/food/snacks/snowcones/pwrgame
	name = "pwrgame snowcone"
	desc = "Pwrgame soda drizzled over a snowball in a paper cup."
	list_reagents = list(/datum/reagent/consumable/nutriment = 1, /datum/reagent/consumable/pwr_game = 5)

//
// snacks_meat.dm
//

/obj/item/reagent_containers/food/snacks/cornedbeef
	filling_color = "D43131"

/obj/item/reagent_containers/food/snacks/bearsteak
	filling_color = "#B22222"

/obj/item/reagent_containers/food/snacks/rawkhinkali
	filling_color = "#F0F0F0"

/obj/item/reagent_containers/food/snacks/nugget
	filling_color = "#E6B857"

/obj/item/reagent_containers/food/snacks/bbqribs
	filling_color = "#662008"

/obj/item/reagent_containers/food/snacks/meatclown
	filling_color = "#CD4122"

/obj/item/reagent_containers/food/snacks/kebab
	filling_color = "#9C4814"

/obj/item/reagent_containers/food/snacks/fishmeat/donkfish
	desc = "A fillet of the proprietary organism and affront to Terran ethical genetic experimentation known as the \"donkfish\". The interior mass is a mess of chaotic meat and cancerous growths, with semi-formed organs and teratomas giving it a dire texture."

/obj/item/reagent_containers/food/snacks/fishmeat/carp
	desc = "A fillet of space carp meat. It's not suitable for consumption raw, due to their unique biology of bearing an unsafe chemical within its body."

/obj/item/reagent_containers/food/snacks/fishandchips
	name = "fish and chips"
	desc = "Battered, fried fish alongside a side of potato chips."

/obj/item/reagent_containers/food/snacks/vegetariansushiroll
	desc = "A sushi roll consisting of rice, carrots, and potatoes wrapped in seaweed. A techncial sibling to the sushi roll, but the origins of the name are unknown. Can be sliced into individual servings."


/obj/item/reagent_containers/food/snacks/fishi
	desc = "A form of temaki roll originating from Zohil, which consists of a whole, specially prepared fish that is wrapped in seaweed."

/obj/item/reagent_containers/food/snacks/nigiri_sushi
	desc = "A form of sushi, consisting of a hand-shaped rice mound with a topping of choice, bound with a band of seaweed. This one appears to have been topped with raw fish."

/obj/item/reagent_containers/food/snacks/rawkhinkali
	desc = "One of the many Terran dumplings. This one is in the shape of a twisted knob, filled with meat, vegetables, and garlic. This one needs to be boiled."

/obj/item/reagent_containers/food/snacks/khinkali
	desc = "One of the many Terran dumplings. This one is in the shape of a twisted knob, filled with meat, vegetables, and garlic."

/obj/item/reagent_containers/food/snacks/sashimi
	desc = "Carefully prepared, thinly cut fish."

/obj/item/reagent_containers/food/snacks/candy_corn
	desc = "A singular candy corn, originating as a Terran tradition."

/obj/item/reagent_containers/food/snacks/chocoorange
	desc = "A traditional Terran confectionary consisting of orange-infused chocolate, made in the mimicry of the orange fruit."

/obj/item/reagent_containers/food/snacks/tinychocolate
	desc = "A small, sweet chocolate." // No where in the spawner box does this claim milk. This is dairy free in every aspect I could find.

/obj/item/reagent_containers/food/snacks/kebab/human
	name = "human-kebab"
	desc = "Chunks of meat that have been cooked and served on a skewer. This one is oddly tender."
	bonus_reagents = list(/datum/reagent/consumable/nutriment = 1, /datum/reagent/consumable/nutriment/vitamin = 6)
	tastes = list("tender meat" = 3, "metal" = 1)
	foodtype = MEAT | GORE

//
// snacks_other.dm
//

/obj/item/reagent_containers/food/snacks/hugemushroomslice
	filling_color = "#876736"

/obj/item/reagent_containers/food/snacks/stuffedlegion
	filling_color = "#3B342B"

/obj/item/reagent_containers/food/snacks/powercrepe
	filling_color = "#D1AE82"

/obj/item/reagent_containers/food/snacks/branrequests
	filling_color = "#D1AE82"

/obj/item/reagent_containers/food/snacks/tatortot
	name = "tator tot"
	desc = "A large fried potato nugget that may or may not try to valid you."
	icon_state = "tatortot"
	list_reagents = list(/datum/reagent/consumable/nutriment = 4)
	filling_color = "FFD700"
	tastes = list("potato" = 3, "valids" = 1)
	foodtype = FRIED | VEGETABLES

/obj/item/reagent_containers/food/snacks/tatortot/Initialize()
	. = ..()
	AddElement(/datum/element/dunkable, 10)

/obj/item/reagent_containers/food/snacks/royalcheese
	name = "royal cheese"
	desc = "A specially treated wheel of cheese, with a crown to grant the eater a petty monarchist position after they've developed a desire for despotic rule."
	icon_state = "royalcheese"
	list_reagents = list(/datum/reagent/consumable/nutriment = 15, /datum/reagent/consumable/nutriment/vitamin = 5, /datum/reagent/gold = 20, /datum/reagent/toxin/mutagen = 5)
	w_class = WEIGHT_CLASS_BULKY
	tastes = list("cheese" = 4, "royalty" = 1)
	foodtype = DAIRY

//
// snacks_pastry.dm
//

/obj/item/reagent_containers/food/snacks/plumphelmetbiscuit
	name = "plump helmet biscuit"
	desc = "This is a finely-prepared plump helmet biscuit. The ingredients are exceptionally minced plump helmet, and well-minced wheat flour."
	icon_state = "phelmbiscuit"
	bonus_reagents = list(/datum/reagent/consumable/nutriment = 1, /datum/reagent/consumable/nutriment/vitamin = 1)
	list_reagents = list(/datum/reagent/consumable/nutriment = 5)
	filling_color = "#F0E68C"
	tastes = list("mushroom" = 1, "biscuit" = 1)
	foodtype = GRAIN | VEGETABLES
	/*food_flags = FOOD_FINGER_FOOD*/
	w_class = WEIGHT_CLASS_SMALL

/obj/item/reagent_containers/food/snacks/plumphelmetbiscuit/Initialize()
	var/fey = prob(10)
	if(fey)
		name = "exceptional plump helmet biscuit"
		desc = "Microwave is taken by a fey mood! It has cooked an exceptional plump helmet biscuit!"
		bonus_reagents = list(/datum/reagent/medicine/omnizine = 5, /datum/reagent/consumable/nutriment = 1, /datum/reagent/consumable/nutriment/vitamin = 1)
	. = ..()
	if(fey)
		reagents.add_reagent(/datum/reagent/medicine/omnizine, 5)

//
// snacks_pie.dm
//

/obj/item/reagent_containers/food/snacks/pie/applepie
	desc = "A pie consisting of sweetened, baked apples and cinnamon. A hallmark of desserts."

//
// snacks_pizza.dm
//

/obj/item/reagent_containers/food/snacks/pizzaslice/dank
	desc = "A slice of cheese pizza that's been topped with ambrosia vulgaris, some swear by its medicinal (and psychogenic) effects as a topping."

/obj/item/reagent_containers/food/snacks/pizza/arnold
	name = "\improper Arnold pizza"
	desc = "Hello, you've reached Arnold's pizza shop. I'm not here now, I'm out killing pepperoni."
	icon_state = "arnoldpizza"
	slice_path = /obj/item/reagent_containers/food/snacks/pizzaslice/arnold
	bonus_reagents = list(/datum/reagent/consumable/nutriment = 30, /datum/reagent/consumable/nutriment/vitamin = 6, /datum/reagent/iron = 10, /datum/reagent/medicine/omnizine = 30)
	tastes = list("crust" = 1, "tomato" = 1, "cheese" = 1, "pepperoni" = 2, "9 millimeter bullets" = 2)

/obj/item/reagent_containers/food/snacks/proc/try_break_off(mob/living/M, mob/living/user) //maybe i give you a pizza maybe i break off your arm
	var/obj/item/bodypart/l_arm = user.get_bodypart(BODY_ZONE_L_ARM)
	var/obj/item/bodypart/r_arm = user.get_bodypart(BODY_ZONE_R_ARM)
	if(prob(50) && iscarbon(user) && M == user && (r_arm || l_arm))
		user.visible_message(span_notice("\The [src] breaks off [user]'s arm!!"), span_notice("\The [src] breaks off your arm!"))
		if(l_arm)
			l_arm.dismember()
		else
			r_arm.dismember()
		playsound(user, "desceration" ,50, TRUE, -1)

/obj/item/reagent_containers/food/snacks/proc/i_kill_you(obj/item/I, mob/user)
	if(istype(I, /obj/item/reagent_containers/food/snacks/pineappleslice))
		to_chat(user, "<font color='red' size='7'>If you want something crazy like pineapple, I kill you.</font>")
		user.gib() //if you want something crazy like pineapple, i kill you

/obj/item/reagent_containers/food/snacks/pizza/arnold/attack(mob/living/M, mob/living/user)
	. = ..()
	try_break_off(M, user)

/obj/item/reagent_containers/food/snacks/pizza/arnold/attackby(obj/item/I, mob/user)
	i_kill_you(I, user)
	. = ..()

/obj/item/reagent_containers/food/snacks/pizzaslice/arnold
	name = "\improper Arnold pizza slice"
	desc = "I come over, maybe I give you a pizza, maybe I break off your arm."
	icon_state = "arnoldpizzaslice"
	filling_color = "#A52A2A"
	tastes = list("crust" = 1, "tomato" = 1, "cheese" = 1, "pepperoni" = 2, "9 millimeter bullets" = 2)
	foodtype = GRAIN | VEGETABLES | DAIRY | MEAT

/obj/item/reagent_containers/food/snacks/pizzaslice/arnold/attack(mob/living/M, mob/living/user)
	. =..()
	try_break_off(M, user)

/obj/item/reagent_containers/food/snacks/pizzaslice/arnold/attackby(obj/item/I, mob/user)
	i_kill_you(I, user)
	. = ..()

//
// snacks_sandwichtoast.dm
//

/obj/item/reagent_containers/food/snacks/grilledcheese
	desc = "A sandwich consisting of cheese between two slices of bread. Commonly grilled in a pan."

/obj/item/reagent_containers/food/snacks/notasandwich
	name = "not-a-sandwich"
	desc = "An unassuming sandwich, of which you have never met personally."
	icon = 'icons/obj/food/burgerbread.dmi'
	icon_state = "notasandwich"
	trash = /obj/item/trash/plate
	bonus_reagents = list(/datum/reagent/consumable/nutriment/vitamin = 6)
	list_reagents = list(/datum/reagent/consumable/nutriment = 6, /datum/reagent/consumable/nutriment/vitamin = 6)
	tastes = list("nothing suspicious" = 1)
	foodtype = GRAIN | GROSS

//
// snacks_soup.dm
//

/obj/item/reagent_containers/food/snacks/soup/clownchili
	name = "chili con carnival"
	desc = "A delicious stew of meat, chiles, and salty, salty clown tears."
	icon_state = "clownchili"
	bonus_reagents = list(/datum/reagent/consumable/nutriment = 1, /datum/reagent/consumable/tomatojuice = 2, /datum/reagent/consumable/nutriment/vitamin = 2, /datum/reagent/consumable/laughter = 1)
	list_reagents = list(/datum/reagent/consumable/nutriment = 5, /datum/reagent/consumable/capsaicin = 1, /datum/reagent/consumable/tomatojuice = 2, /datum/reagent/consumable/nutriment/vitamin = 2, /datum/reagent/consumable/banana = 1)
	tastes = list("tomato" = 1, "hot peppers" = 2, "clown feet" = 2, "kind of funny" = 2, "someone's parents" = 2)
	foodtype = VEGETABLES | MEAT
